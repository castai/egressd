// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: pb/metrics.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RawNetworkMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIp     int32 `protobuf:"varint,1,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp     int32 `protobuf:"varint,2,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	TxBytes   int64 `protobuf:"varint,3,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	TxPackets int64 `protobuf:"varint,4,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	RxBytes   int64 `protobuf:"varint,5,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	RxPackets int64 `protobuf:"varint,6,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	Proto     int32 `protobuf:"varint,7,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *RawNetworkMetric) Reset() {
	*x = RawNetworkMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawNetworkMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawNetworkMetric) ProtoMessage() {}

func (x *RawNetworkMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pb_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawNetworkMetric.ProtoReflect.Descriptor instead.
func (*RawNetworkMetric) Descriptor() ([]byte, []int) {
	return file_pb_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *RawNetworkMetric) GetSrcIp() int32 {
	if x != nil {
		return x.SrcIp
	}
	return 0
}

func (x *RawNetworkMetric) GetDstIp() int32 {
	if x != nil {
		return x.DstIp
	}
	return 0
}

func (x *RawNetworkMetric) GetTxBytes() int64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *RawNetworkMetric) GetTxPackets() int64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

func (x *RawNetworkMetric) GetRxBytes() int64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *RawNetworkMetric) GetRxPackets() int64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *RawNetworkMetric) GetProto() int32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

type RawNetworkMetricBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RawNetworkMetric `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RawNetworkMetricBatch) Reset() {
	*x = RawNetworkMetricBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawNetworkMetricBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawNetworkMetricBatch) ProtoMessage() {}

func (x *RawNetworkMetricBatch) ProtoReflect() protoreflect.Message {
	mi := &file_pb_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawNetworkMetricBatch.ProtoReflect.Descriptor instead.
func (*RawNetworkMetricBatch) Descriptor() ([]byte, []int) {
	return file_pb_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *RawNetworkMetricBatch) GetItems() []*RawNetworkMetric {
	if x != nil {
		return x.Items
	}
	return nil
}

type PodNetworkMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIp        int32  `protobuf:"varint,1,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcPod       string `protobuf:"bytes,2,opt,name=src_pod,json=srcPod,proto3" json:"src_pod,omitempty"`
	SrcNamespace string `protobuf:"bytes,3,opt,name=src_namespace,json=srcNamespace,proto3" json:"src_namespace,omitempty"`
	SrcNode      string `protobuf:"bytes,4,opt,name=src_node,json=srcNode,proto3" json:"src_node,omitempty"`
	SrcZone      string `protobuf:"bytes,6,opt,name=src_zone,json=srcZone,proto3" json:"src_zone,omitempty"`
	DstIp        int32  `protobuf:"varint,7,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstPod       string `protobuf:"bytes,8,opt,name=dst_pod,json=dstPod,proto3" json:"dst_pod,omitempty"`
	DstNamespace string `protobuf:"bytes,9,opt,name=dst_namespace,json=dstNamespace,proto3" json:"dst_namespace,omitempty"`
	DstNode      string `protobuf:"bytes,10,opt,name=dst_node,json=dstNode,proto3" json:"dst_node,omitempty"`
	DstZone      string `protobuf:"bytes,11,opt,name=dst_zone,json=dstZone,proto3" json:"dst_zone,omitempty"`
	TxBytes      int64  `protobuf:"varint,12,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	TxPackets    int64  `protobuf:"varint,13,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	RxBytes      int64  `protobuf:"varint,14,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	RxPackets    int64  `protobuf:"varint,15,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	Proto        int32  `protobuf:"varint,16,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *PodNetworkMetric) Reset() {
	*x = PodNetworkMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodNetworkMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodNetworkMetric) ProtoMessage() {}

func (x *PodNetworkMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pb_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodNetworkMetric.ProtoReflect.Descriptor instead.
func (*PodNetworkMetric) Descriptor() ([]byte, []int) {
	return file_pb_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *PodNetworkMetric) GetSrcIp() int32 {
	if x != nil {
		return x.SrcIp
	}
	return 0
}

func (x *PodNetworkMetric) GetSrcPod() string {
	if x != nil {
		return x.SrcPod
	}
	return ""
}

func (x *PodNetworkMetric) GetSrcNamespace() string {
	if x != nil {
		return x.SrcNamespace
	}
	return ""
}

func (x *PodNetworkMetric) GetSrcNode() string {
	if x != nil {
		return x.SrcNode
	}
	return ""
}

func (x *PodNetworkMetric) GetSrcZone() string {
	if x != nil {
		return x.SrcZone
	}
	return ""
}

func (x *PodNetworkMetric) GetDstIp() int32 {
	if x != nil {
		return x.DstIp
	}
	return 0
}

func (x *PodNetworkMetric) GetDstPod() string {
	if x != nil {
		return x.DstPod
	}
	return ""
}

func (x *PodNetworkMetric) GetDstNamespace() string {
	if x != nil {
		return x.DstNamespace
	}
	return ""
}

func (x *PodNetworkMetric) GetDstNode() string {
	if x != nil {
		return x.DstNode
	}
	return ""
}

func (x *PodNetworkMetric) GetDstZone() string {
	if x != nil {
		return x.DstZone
	}
	return ""
}

func (x *PodNetworkMetric) GetTxBytes() int64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *PodNetworkMetric) GetTxPackets() int64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

func (x *PodNetworkMetric) GetRxBytes() int64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *PodNetworkMetric) GetRxPackets() int64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *PodNetworkMetric) GetProto() int32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

type PodNetworkMetricBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PodNetworkMetric `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PodNetworkMetricBatch) Reset() {
	*x = PodNetworkMetricBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodNetworkMetricBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodNetworkMetricBatch) ProtoMessage() {}

func (x *PodNetworkMetricBatch) ProtoReflect() protoreflect.Message {
	mi := &file_pb_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodNetworkMetricBatch.ProtoReflect.Descriptor instead.
func (*PodNetworkMetricBatch) Descriptor() ([]byte, []int) {
	return file_pb_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *PodNetworkMetricBatch) GetItems() []*PodNetworkMetric {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_pb_metrics_proto protoreflect.FileDescriptor

var file_pb_metrics_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x40, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x61, 0x77, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xb2, 0x03, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x72, 0x63, 0x50, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x74, 0x50, 0x6f,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x15, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x61, 0x69, 0x2f, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x64, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_metrics_proto_rawDescOnce sync.Once
	file_pb_metrics_proto_rawDescData = file_pb_metrics_proto_rawDesc
)

func file_pb_metrics_proto_rawDescGZIP() []byte {
	file_pb_metrics_proto_rawDescOnce.Do(func() {
		file_pb_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_metrics_proto_rawDescData)
	})
	return file_pb_metrics_proto_rawDescData
}

var file_pb_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pb_metrics_proto_goTypes = []interface{}{
	(*RawNetworkMetric)(nil),      // 0: RawNetworkMetric
	(*RawNetworkMetricBatch)(nil), // 1: RawNetworkMetricBatch
	(*PodNetworkMetric)(nil),      // 2: PodNetworkMetric
	(*PodNetworkMetricBatch)(nil), // 3: PodNetworkMetricBatch
}
var file_pb_metrics_proto_depIdxs = []int32{
	0, // 0: RawNetworkMetricBatch.items:type_name -> RawNetworkMetric
	2, // 1: PodNetworkMetricBatch.items:type_name -> PodNetworkMetric
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pb_metrics_proto_init() }
func file_pb_metrics_proto_init() {
	if File_pb_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawNetworkMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawNetworkMetricBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodNetworkMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodNetworkMetricBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_metrics_proto_goTypes,
		DependencyIndexes: file_pb_metrics_proto_depIdxs,
		MessageInfos:      file_pb_metrics_proto_msgTypes,
	}.Build()
	File_pb_metrics_proto = out.File
	file_pb_metrics_proto_rawDesc = nil
	file_pb_metrics_proto_goTypes = nil
	file_pb_metrics_proto_depIdxs = nil
}
