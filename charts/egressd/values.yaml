# Default values for egressd.
# Declare variables to be passed into your templates.

# CAST AI API configuration.
castai:
  # Token to be used for authorizing agent access to the CASTAI API
  apiKey: ""

  # Name of secret with Token to be used for authorizing agent access to the API
  # apiKey and apiKeySecretRef are mutually exclusive
  # The referenced secret must provide the token in .data["API_KEY"]
  apiKeySecretRef: ""

  # CASTAI public api url.
  apiURL: "https://api.cast.ai"

  # CASTAI Cluster unique identifier.
  clusterID: ""

image:
  repository: ghcr.io/castai/egressd/egressd
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  privileged: true

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

dnsPolicy: ClusterFirstWithHostNet

# Extra args for egressd container.
extraArgs:
  # metric-buffer-size: 10000

export:
  enabled: true
  mode: "http"
  http:
    # By default export is set to vector aggregator service.
    # addr: http://castai-egressd-aggregator:80
    addr: ""
  file:
    image: timberio/vector:0.25.1-alpine
    resources: {}
    securityContext: {}
    vectorConfig: |
      sources:
        logs:
          type: file
          ignore_older_secs: 600
          include:
            - /var/run/egressd/egressd.log
          read_from: end
      sinks:
        vector_aggregator:
          type: vector
          inputs:
            - logs
          address: {{ include "egressd.export.file.addr" . }}

aggregator:
  enabled: true
  logToStdout: false
  castaiSink:
    maxBytes: "10485760" # 10MB on not compressed logs. Final logs will be compressed.
    timeoutSecs: "60" # Send logs after this period or maxBytes.
